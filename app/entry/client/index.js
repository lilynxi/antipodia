// @flow

import React from 'react';
import ReactDOM from 'react-dom';
import { browserHistory } from 'react-router';
import { syncHistoryWithStore } from 'react-router-redux';
import configureClientStore from 'state/configureClientStore';
import selectLocationState from 'state/selectors/locationState';
import createRoutes from 'routing/createRoutes';
import type { Store } from 'redux';
import Root from './root';

// Create redux store with history. This uses the singleton browserHistory
// provided by react-router. Optionally, this could be changed to leverage a
// created history.
//
// e.g. `const browserHistory = useRouterHistory(createBrowserHistory)();`
const store: Store<any, any> = configureClientStore(browserHistory);
const routes: any = createRoutes(store);
const history: any = syncHistoryWithStore(
  browserHistory,
  store,
  { selectLocationState },
);

// Find the DOM node generated by the server.
const mountNode = global.document.getElementById('app');

// Encapsulate rendering for hot-reloading.
const render: Function = (Component): void => {
  ReactDOM.render((
    <Component
      store={store}
      routes={routes}
      history={history}
    />
  ), mountNode);
};

if (module.hot && module.hot.accept && typeof module.hot.accept === 'function') {
  module.hot.accept('./root', (): void => render(require('./root').default)); // eslint-disable-line global-require
}

// Do the initial rendering.
render(Root);
